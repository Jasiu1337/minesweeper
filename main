#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>
using namespace std;
#define RST  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"

#define RED(x) KRED x RST
#define GREEN(x) KGRN x RST
#define YELLOW(x) KYEL x RST
#define BLUE(x) KBLU x RST
#define MAGENTA(x) KMAG x RST
#define CYAN(x) KCYN x RST
#define FWHT(x) KWHT x RST

#define BOLD(x) "\x1B[1m" x RST
#define UNDL(x) "\x1B[4m" x RST
int FLAGCOUNT=0;
struct square
{
    bool mine=0;
    int number=0;
    bool visible=0;
    bool flag=0;
};
square field [8][8];
void fill_mines()
{
    for(int i=0; i<10; ++i)
    {
        int x=rand()%8;
        int y=rand()%8;
        if(!field[x][y].mine)
          field[x][y].mine=1;
        else
          --i;
    }
}
void show_mines()
{
    cout<<"   0 1 2 3 4 5 6 7"<<endl<<endl;
    for(int i=0; i<8; ++i)
    {
       cout<<i<<"  ";
       for(int j=0; j<8; ++j)
       {
           if(field[i][j].mine)
           cout<<RED("M ");
           else
           cout<<YELLOW("0 ");
       }
       cout<<endl;
    }
    cout<<endl;
}
void fill_numbers()
{
    for(int i=1;i<7;++i)
    {
        for(int j=1;j<7;++j)
        {
            if(field[i-1][j-1].mine)field[i][j].number++;
            if(field[i][j-1].mine)field[i][j].number++;
            if(field[i+1][j-1].mine)field[i][j].number++;
            if(field[i-1][j].mine)field[i][j].number++;
            if(field[i+1][j].mine)field[i][j].number++;
            if(field[i-1][j+1].mine)field[i][j].number++;
            if(field[i][j+1].mine)field[i][j].number++;
            if(field[i+1][j+1].mine)field[i][j].number++;
        }
    }
   if(field[0][1].mine) field[0][0].number++;
   if(field[1][1].mine) field[0][0].number++;
   if(field[1][0].mine) field[0][0].number++;
   //
   if(field[6][7].mine) field[7][7].number++;
   if(field[6][6].mine) field[7][7].number++;
   if(field[7][6].mine) field[7][7].number++;
   //
   if(field[0][6].mine) field[0][7].number++;
   if(field[1][6].mine) field[0][7].number++;
   if(field[1][7].mine) field[0][7].number++;
   //
   if(field[6][0].mine) field[7][0].number++;
   if(field[6][1].mine) field[7][0].number++;
   if(field[7][1].mine) field[7][0].number++;
   //
   for(int i=1;i<7;++i)
   {
      if(field[0][i-1].mine) field[0][i].number++;
      if(field[0][i+1].mine) field[0][i].number++;
      if(field[1][i-1].mine) field[0][i].number++;
      if(field[1][i].mine) field[0][i].number++;
      if(field[1][i+1].mine) field[0][i].number++;
   }
   //
   for(int i=1;i<7;++i)
   {
      if(field[7][i-1].mine) field[7][i].number++;
      if(field[7][i+1].mine) field[7][i].number++;
      if(field[6][i-1].mine) field[7][i].number++;
      if(field[6][i].mine) field[7][i].number++;
      if(field[6][i+1].mine) field[7][i].number++;
   }
   //
   for(int i=1;i<7;++i)
   {
      if(field[i+1][0].mine) field[i][0].number++;
      if(field[i+1][1].mine) field[i][0].number++;
      if(field[i-1][0].mine) field[i][0].number++;
      if(field[i-1][1].mine) field[i][0].number++;
      if(field[i][1].mine) field[i][0].number++;
   }
   //
   for(int i=1;i<7;++i)
   {
      if(field[i+1][7].mine) field[i][7].number++;
      if(field[i+1][6].mine) field[i][7].number++;
      if(field[i-1][7].mine) field[i][7].number++;
      if(field[i-1][6].mine) field[i][7].number++;
      if(field[i][6].mine) field[i][7].number++;
   }
}
void show_numbers()
{
    cout<<"   0 1 2 3 4 5 6 7"<<endl<<endl;
    for(int i=0; i<8; ++i)
    {
       cout<<i<<"  ";
       for(int j=0; j<8; ++j)
       {
           cout<<field[i][j].number<<" ";
       }
       cout<<endl;
    }
    cout<<endl;
}
void show_visible()
{
    cout<<"   0 1 2 3 4 5 6 7"<<endl<<endl;
    for(int i=0; i<8; ++i)
    {
       cout<<i<<"  ";
       for(int j=0; j<8; ++j)
       {
           if(field[i][j].visible)
           cout<<field[i][j].number<<" ";
           else if(field[i][j].flag)
           cout<<RED("F ");
           else
           cout<<YELLOW("? ");
       }
       cout<<endl;
    }
    cout<<endl;
}
bool reveal(int i, int j)
{
    if(i>7||j>7||i<0||j<0)
    {
        //cout<<RED("wrong coordinates, try again")<<endl;
        return 0;
    }
    if(field[i][j].mine)
    {
        cout<<RED("BOOM, you lose!")<<endl;
        show_mines();
        return 1;
    }
    field[i][j].visible=1;
    if(field[i][j].flag)
    {
       field[i][j].flag=0;
       --FLAGCOUNT;
    }
    if(!field[i][j].number)
    {
    if(!field[i-1][j-1].visible)reveal(i-1,j-1);
    if(!field[i][j-1].visible)reveal(i,j-1);
    if(!field[i+1][j-1].visible)reveal(i+1,j-1);
    if(!field[i-1][j].visible)reveal(i-1,j);
    if(!field[i+1][j].visible)reveal(i+1,j);
    if(!field[i-1][j+1].visible)reveal(i-1,j+1);
    if(!field[i][j+1].visible)reveal(i,j+1);
    if(!field[i+1][j+1].visible)reveal(i+1,j+1);
    }
    return 0;
}
bool chord(int i, int j)
{
    if(i>7||j>7||i<0||j<0)
    {
        cout<<RED("wrong coordinates, try again")<<endl;
        return 0;
    }
    int explosion_count=0;
    if(!field[i-1][j-1].visible&&!field[i-1][j-1].flag)explosion_count+=reveal(i-1,j-1);
    if(!field[i][j-1].visible&&!field[i][j-1].flag)explosion_count+=reveal(i,j-1);
    if(!field[i+1][j-1].visible&&!field[i+1][j-1].flag)explosion_count+=reveal(i+1,j-1);
    if(!field[i-1][j].visible&&!field[i-1][j].flag)explosion_count+=reveal(i-1,j);
    if(!field[i+1][j].visible&&!field[i+1][j].flag)explosion_count+=reveal(i+1,j);
    if(!field[i-1][j+1].visible&&!field[i-1][j+1].flag)explosion_count+=reveal(i-1,j+1);
    if(!field[i][j+1].visible&&!field[i][j+1].flag)explosion_count+=reveal(i,j+1);
    if(!field[i+1][j+1].visible&&!field[i+1][j+1].flag)explosion_count+=reveal(i+1,j+1);
    if(explosion_count)
        return 1;
    return 0;
}
void flag(int i,int j)
{
    if(i>7||j>7||i<0||j<0)
    {
        cout<<RED("wrong coordinates, try again")<<endl;
        return;
    }
    if(field[i][j].visible)
    {
        cout<<RED("cant flag visible field, try again")<<endl;
        return;
    }
    if(field[i][j].flag)
        --FLAGCOUNT;
    else
        ++FLAGCOUNT;
    field[i][j].flag=!field[i][j].flag;
}
void check_flags()
{
    int counter=0;
    for(int i=0; i<8; ++i)
        for(int j=0; j<8; ++j)
        {
            if(field[i][j].flag&&field[i][j].mine)
                counter++;
        }
    show_visible();
    show_mines();
    if(counter==10)
    {
       cout<<GREEN("you win, good job!")<<endl;
    }
    else
       cout<<RED("you lose, wrongly placed flags!")<<endl;
}
void minesweeper()
{
    cout<<"welcome to minesweeper, flag 10 mines to win"<<endl;
    cout<<"eneter coordinates in format:"<<endl<<
              "row column [operation]"<<endl<<endl<<
              "f -flag"<<endl<<
              "r -reveal"<<endl<<
              "c -chord (reveal all squares around except for flagged ones)"<<endl<<
              "e -exit"<<endl<<endl;
    int i;
    int j;
    int op_count=0;
    char operation;
    show_visible();
    while(true)
    {
        cin>>i;
        cin>>j;
        cin>>operation;
        /////////////////////////////
        switch (operation)
        {
        case 'f':
        {
            flag(i,j);
            //show_mines();
            break;
        }
        case 'r':
        {
            if(reveal(i,j))
            return;
            break;
        }
        case 'c':
        {
            if(chord(i,j))
            return;
            break;
        }
        case 'e':
        {
            cout<<"game exited"<<endl;
            return;
            break;
        }
        default:
        {
            continue;
        }
        }
        cout<<GREEN("placed flags: ")<<FLAGCOUNT<<endl;
        cout<<GREEN("number of moves: ")<<++op_count<<endl;
        show_visible();
        if(FLAGCOUNT==10)
        {
            check_flags();
            return;
        }
    }
}
int main()
{
srand(time(0));
fill_mines();
fill_numbers();
//show_mines();
//show_numbers();
minesweeper();
}
